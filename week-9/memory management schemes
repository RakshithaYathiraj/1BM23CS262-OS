#include <stdio.h>
#define MAX 25
void firstFit(int b[], int nb, int f[], int nf);
void worstFit(int b[], int nb, int f[], int nf);
void bestFit(int b[], int nb, int f[], int nf);
int main() {
int b[MAX], f[MAX], nb, nf;
printf("Memory Management Schemes\n");
printf("\nEnter the number of blocks: ");
scanf("%d"
, &nb);
printf("Enter the number of files: ");
scanf("%d"
, &nf);
printf("\nEnter the size of the blocks:\n");
for (int i = 0; i < nb; i++)
{
printf("Block %d: "
, i + 1);
scanf("%d"
, &b[i]);
}
printf("\nEnter the size of the files:\n");
for (int i = 0; i < nf; i++)
{
printf("File %d: "
, i + 1);
scanf("%d"
, &f[i]);
}
printf("\nMemory Management Scheme - First Fit");
firstFit(b, nb, f, nf);
printf("\n\nMemory Management Scheme - Worst Fit");
worstFit(b, nb, f, nf);
printf("\n\nMemory Management Scheme - Best Fit");
bestFit(b, nb, f, nf);
return 0;
}
{
void firstFit(int b[], int nb, int f[], int nf)
int bf[MAX] = {0}, ff[MAX] = {0}, frag[MAX];
for (int i = 0; i < nf; i++)
{
ff[i] = -1;
for (int j = 0; j < nb; j++)
{
if (!bf[j] && b[j] >= f[i])
{
ff[i] = j;
bf[j] = 1;
frag[i] = b[j] - f[i];
break;
}
}
}
printf("\nFile
no:\tFile
size:\tBlock
no:\tBlock
_
_
_
_
size:\tFragment");
for (int i = 0; i < nf; i++)
{
if (ff[i] != -1)
else
printf("\n%d\t\t%d\t\t%d\t\t%d\t\t%d"
, i + 1, f[i], ff[i] + 1, b[ff[i]], frag[i]);
printf("\n%d\t\t%d\t\tNot Allocated"
, i + 1, f[i]);
}
}
{
void worstFit(int b[], int nb, int f[], int nf)
int bf[MAX] = {0}, ff[MAX] = {0}, frag[MAX];
for (int i = 0; i < nf; i++)
{
int worstIdx = -1;
for (int j = 0; j < nb; j++)
{
if (!bf[j] && b[j] >= f[i])
{
if (worstIdx == -1 || b[j] - f[i] > b[worstIdx] - f[i])
{
worstIdx = j;
}
}
}
ff[i] = worstIdx;
if (worstIdx != -1)
{
bf[worstIdx] = 1;
frag[i] = b[worstIdx] - f[i];
}
}
printf("\nFile
no:\tFile
size:\tBlock
no:\tBlock
_
_
_
_
size:\tFragment");
for (int i = 0; i < nf; i++)
{
if (ff[i] != -1)
else
printf("\n%d\t\t%d\t\t%d\t\t%d\t\t%d"
, i + 1, f[i], ff[i] + 1, b[ff[i]], frag[i]);
printf("\n%d\t\t%d\t\tNot Allocated"
, i + 1, f[i]);
}
}
{
void bestFit(int b[], int nb, int f[], int nf)
int bf[MAX] = {0}, ff[MAX] = {0}, frag[MAX];
28
for (int i = 0; i < nf; i++)
{
int bestIdx = -1;
for (int j = 0; j < nb; j++)
{
if (!bf[j] && b[j] >= f[i])
{
if (bestIdx == -1 || b[j] - f[i] < b[bestIdx] - f[i])
{
bestIdx = j;
}
}
}
ff[i] = bestIdx;
if (bestIdx != -1)
{
bf[bestIdx] = 1;
frag[i] = b[bestIdx] - f[i];
}
}
printf("\nFile
no:\tFile
size:\tBlock
no:\tBlock
_
_
_
_
size:\tFragment");
for (int i = 0; i < nf; i++)
{
if (ff[i] != -1)
else
printf("\n%d\t\t%d\t\t%d\t\t%d\t\t%d"
, i + 1, f[i], ff[i] + 1, b[ff[i]], frag[i]);
printf("\n%d\t\t%d\t\tNot Allocated"
, i + 1, f[i]);
}
}
