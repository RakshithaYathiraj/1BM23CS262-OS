#include <stdio.h>

struct Process {
    int pid;
    int arrival;
    int burst;
    int remaining;
    int turnaround;
    int waiting;
};

void displayResults(struct Process proc[], int n, int total_waiting, int total_turnaround) {
    printf("PID\tArrival\tBurst\tWaiting\tTurnaround\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t%d\t%d\t%d\n", proc[i].pid, proc[i].arrival, proc[i].burst, proc[i].waiting, proc[i].turnaround);
    }
    printf("\nAverage Waiting Time: %.2f\n", (float)total_waiting / n);
    printf("Average Turnaround Time: %.2f\n\n", (float)total_turnaround / n);
}

void roundRobin(struct Process proc[], int n, int quantum) {
    int time = 0, total_waiting = 0, total_turnaround = 0, completed = 0;
    for (int i = 0; i < n; i++) {
        proc[i].remaining = proc[i].burst;
    }
    while (completed != n) {
        for (int i = 0; i < n; i++) {
            if (proc[i].arrival <= time && proc[i].remaining > 0) {
                int execute_time = (proc[i].remaining > quantum) ? quantum : proc[i].remaining;
                proc[i].remaining -= execute_time;
                time += execute_time;
                if (proc[i].remaining == 0) {
                    completed++;
                    proc[i].turnaround = time - proc[i].arrival;
                    proc[i].waiting = proc[i].turnaround - proc[i].burst;
                    total_waiting += proc[i].waiting;
                    total_turnaround += proc[i].turnaround;
                }
            }
        }
    }
    printf("Round Robin Scheduling (Quantum = %d):\n", quantum);
    displayResults(proc, n, total_waiting, total_turnaround);
}

int main() {
    int n, quantum;
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    struct Process proc[n];
    for (int i = 0; i < n; i++) {
        printf("Enter arrival time and burst time for process %d: ", i + 1);
        scanf("%d %d", &proc[i].arrival, &proc[i].burst);
        proc[i].pid = i + 1;
    }
    printf("Enter time quantum for Round Robin: ");
    scanf("%d", &quantum);
    roundRobin(proc, n, quantum);
    return 0;
}
