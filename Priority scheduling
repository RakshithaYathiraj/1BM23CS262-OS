#include <stdio.h>
#include <limits.h>

struct Process {
    int pid;
    int arrival;
    int burst;
    int priority;
    int remaining;
    int turnaround;
    int waiting;
};

void displayResults(struct Process proc[], int n, int total_waiting, int total_turnaround) {
    printf("PID\tArrival\tBurst\tPriority\tWaiting\tTurnaround\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t%d\t%d\t\t%d\t%d\n", proc[i].pid, proc[i].arrival, proc[i].burst, proc[i].priority, proc[i].waiting, proc[i].turnaround);
    }
    printf("\nAverage Waiting Time: %.2f\n", (float)total_waiting / n);
    printf("Average Turnaround Time: %.2f\n\n", (float)total_turnaround / n);
}

void priorityNonPreemptive(struct Process proc[], int n) {
    int time = 0, total_waiting = 0, total_turnaround = 0;
    for (int i = 0; i < n; i++) {
        int highest = i;
        for (int j = i; j < n; j++) {
            if (proc[j].arrival <= time && proc[j].priority < proc[highest].priority) {
                highest = j;
            }
        }
        struct Process temp = proc[i];
        proc[i] = proc[highest];
        proc[highest] = temp;
        proc[i].waiting = time - proc[i].arrival;
        proc[i].turnaround = proc[i].waiting + proc[i].burst;
        time += proc[i].burst;
        total_waiting += proc[i].waiting;
        total_turnaround += proc[i].turnaround;
    }
    printf("Non-Preemptive Priority Scheduling:\n");
    displayResults(proc, n, total_waiting, total_turnaround);
}

void priorityPreemptive(struct Process proc[], int n) {
    int time = 0, total_waiting = 0, total_turnaround = 0, completed = 0;
    for (int i = 0; i < n; i++) {
        proc[i].remaining = proc[i].burst;
    }
    while (completed != n) {
        int highest = -1, min_priority = INT_MAX;
        for (int i = 0; i < n; i++) {
            if (proc[i].arrival <= time && proc[i].remaining > 0 && proc[i].priority < min_priority) {
                min_priority = proc[i].priority;
                highest = i;
            }
        }
        if (highest == -1) {
            time++;
            continue;
        }
        proc[highest].remaining--;
        time++;
        if (proc[highest].remaining == 0) {
            completed++;
            proc[highest].turnaround = time - proc[highest].arrival;
            proc[highest].waiting = proc[highest].turnaround - proc[highest].burst;
            total_waiting += proc[highest].waiting;
            total_turnaround += proc[highest].turnaround;
        }
    }
    printf("Pre-emptive Priority Scheduling:\n");
    displayResults(proc, n, total_waiting, total_turnaround);
}

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    struct Process proc[n];
    for (int i = 0; i < n; i++) {
        printf("Enter arrival time, burst time, and priority for process %d: ", i + 1);
        scanf("%d %d %d", &proc[i].arrival, &proc[i].burst, &proc[i].priority);
        proc[i].pid = i + 1;
    }
    priorityNonPreemptive(proc, n);
    priorityPreemptive(proc, n);
    return 0;
}
